type Payment @entity {
  id: ID!
  contractAddress: String!
  tokenAddress: Bytes
  to: String!
  from: String!
  reference: String!
  block: Int!
  timestamp: BigInt!
  txHash: String
  receiptId: String!
  gasUsed: BigInt!
  gasPrice: BigInt!
  amount: BigDecimal!

  # fee values (Unusued)
  feeAmount: BigDecimal
  feeAddress: String

  # conversion values (Unusued)
  currency: String
  amountInCrypto: BigDecimal
  feeAmountInCrypto: BigDecimal
  maxRateTimespan: Int
}

enum EscrowState {
  paidEscrow
  paidIssuer
  emergency
  frozen
}

type Escrow @entity {
  id: ID!
  contractAddress: Bytes!
  paymentProxyAddress: Bytes!
  reference: Bytes!
  creationBlock: Int!
  creationTimestamp: Int!
  escrowState: EscrowState!
  tokenAddress: Bytes!
  amount: BigDecimal!
  feeAmount: BigDecimal!
  feeAddress: Bytes!
  from: Bytes!
  to: Bytes
  events: [EscrowEvent!] @derivedFrom(field: "escrow")
}

enum EventName {
  paidEscrow
  paidIssuer
  initiateEmergencyClaim
  revertEmergencyClaim
  freezeEscrow
}

type EscrowEvent @entity {
  id: ID!
  contractAddress: Bytes!
  reference: Bytes!
  escrow: Escrow!
  block: Int!
  timestamp: Int!
  txHash: Bytes!
  eventName: EventName!
  from: Bytes!
  gasUsed: BigInt!
  gasPrice: BigInt!
}
